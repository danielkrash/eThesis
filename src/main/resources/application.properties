spring.application.name=eThesis
server.port=8084
spring.datasource.url=jdbc:postgresql://localhost:5431/uni_projects?currentSchema=ethesis
#spring.jpa.properties.hibernate.default_schema=ethesis
spring.datasource.username=postgres
spring.datasource.password=546231redQ!
spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.orm.jdbc.bind=TRACE
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate=INFO
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG
logging.level.org.springframework.jdbc.core.StatementCreatorUtils=TRACE
logging.level.org.hibernate.TYPE=TRACE
logging.level.org.springframework=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.com.uni.spring_graduation.config.KeycloakAuthorityConverter=DEBUG


spring.security.oauth2.client.registration.graduation-application.client-id=graduation-application
spring.security.oauth2.client.registration.graduation-application.client-secret=ohMPB1QcFA3aqifZ5SDgfYgNTuzD0biw
spring.security.oauth2.client.registration.graduation-application.scope=roles,openid,profile
spring.security.oauth2.client.registration.graduation-application.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.graduation-application.redirect-uri=http://localhost:8084/login/oauth2/code/graduation-security-keyckloak
spring.security.oauth2.client.provider.graduation-application.issuer-uri=http://localhost:8080/realms/graduation-spring-realm
spring.security.oauth2.client.provider.graduation-application.token-uri=http://localhost:8080/realms/graduation-spring-realm/protocol/openid-connect/token
spring.security.oauth2.client.provider.graduation-application.user-info-uri=http://localhost:8080/realms/graduation-spring-realm/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.graduation-application.authorization-uri=http://localhost:8080/realms/graduation-spring-realm/protocol/openid-connect/auth
spring.security.oauth2.client.provider.graduation-application.jwk-set-uri=http://localhost:8080/realms/graduation-spring-realm/protocol/openid-connect/certs


spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/graduation-spring-realm
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/realms/master/protocol/openid-connect/certs
keycloak.auth-server-url=http://localhost:8080
keycloak.realm=graduation-spring-realm
keycloak.resource=admin_client_custom
keycloak.credentials.secret=iWObn74H7syU0MfopbRjsVxs1oMPTzWn

# SpringDoc OpenAPI (Swagger) UI OAuth2 Configuration
springdoc.swagger-ui.oauth.client-id=swagger-ui-client
# You might need a client secret if your Keycloak client is confidential
# springdoc.swagger-ui.oauth.client-secret=your-swagger-ui-client-secret
# springdoc.swagger-ui.oauth.use-pkce-with-authorization-code-grant=true # Not applicable for implicit flow
springdoc.swagger-ui.oauth.scopes=openid,profile,roles
# The following are automatically picked up by the @SecurityScheme in OpenApiConfig.java

# Error handling configuration
app.debug.detailed-errors=false

# Spring Boot error handling
 server.error.whitelabel.enabled=false
 server.error.include-stacktrace=on_param
 server.error.include-message=always
 server.error.include-binding-errors=always
# spring.mvc.throw-exception-if-no-handler-found=true
# spring.web.resources.add-mappings=false
# springdoc.swagger-ui.oauth.authorization-url=${keycloak.auth-server-url}/realms/${keycloak.realm}/protocol/openid-connect/auth
# springdoc.swagger-ui.oauth.token-url=${keycloak.auth-server-url}/realms/${keycloak.realm}/protocol/openid-connect/token

# File upload configuration
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB
app.upload.dir=uploads